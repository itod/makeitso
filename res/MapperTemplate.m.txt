#import "{{class.name}}Mapper.h"
#import "{{class.name}}.h"
{%for className in class.relationshipClassNames %}
#import "{{className}}.h"
{%/for%}
#import "MISUnitOfWork.h"

#import <fmdb/FMResultSet.h>
#import <fmdb/FMDatabase.h>

@interface MISMapper ()
@property (nonatomic, retain) MISUnitOfWork *unitOfWork;
@end

@implementation {{class.name}}Mapper

- (id)initWithDomainClass:(Class)cls {
    self = [super init];
    if (self) {
        self.tableName = @"{{tableName}}";
        self.selectColumnList = @"{{selectColumnList}}";
        self.columnNames = @[{%for field in class.fields%}
            @"{{field.name}}",{%/for%}
        ];
    }
    return self;
}


- (void)loadFields:(FMResultSet *)rs inObject:(DomainObject *)obj {
    TDAssertDatabaseThread();
    TDAssert(rs);
    TDAssert(obj);
    TDAssert(self.unitOfWork);
{%trim%}
    {%for field in class.fields %}
    {%indent%}

        {
        {%indent%}
            {%if 0 == field.relationship %}{%comment%} ONE_TO_ONE {%/comment%}
                {%if 'NSString' == field.className %}
                    NSString *{{field.name}} = [rs stringForColumn:@"{{field.name}}"];
                {%elif 'NSNumber' == field.className %}
                    NSNumber *{{field.name}} = [rs objectForColumnName:@"{{field.name}}"];
                {%elif 'NSDate' == field.className %}
                    long long timestamp = [rs longLongForColumnName:@"{{field.name}}"];
                    NSDate *{{field.name}} = [NSDate dateWithTimeIntervalSince1970:timestamp];
                {%elif 'NSData' == field.className %}
                    NSData *{{field.name}} = [rs dataForColumnName:@"{{field.name}}"];
                {%else%}
                    NSNumber *objID = [rs objectForColumnName:@"{{field.name}}"];
                    DomainObject *{{field.name}} = [self.unitOfWork objectForID:objID];
                    if (!{{field.name}}) {
                    {%indent%}
                        MISMapper *mapper = [self.unitOfWork mapperForDomainClass:[{{field.className}} class]];
                        {{field.name}} = [mapper findObject:objID];
                    {%/indent%}
                    }
                {%/if%}
            {%elif 1 == field.relationship %}{%comment%} ONE_TO_MANY {%/comment%}
                MISMapper *mapper = [self.unitOfWork mapperForDomainClass:[{{field.className}} class]];
                NSArray *objIDs = nil; // TODO
                NSMutableArray *{{field.name}} = [NSMutableArray array];

                for (NSNumber *objID in objIDs) {
                {%indent%}
                    DomainObject *obj = [mapper findObject:objID];
                    if (obj) [{{field.name}} addObject:obj];
                {%/indent%}
                }

            {%elif 2 == field.relationship %}{%comment%} MANY_TO_MANY {%/comment%}

            {%/if%}
            [obj setValue:{{field.name}} forKey:@"{{field.name}}"];
        {%/indent%}
        }
    {%/indent%}
    {%/for%}
{%/trim%}
}


- (void)performInsert:(DomainObject *)obj {
    TDAssertDatabaseThread();
    TDAssert(obj);
    TDAssert(self.unitOfWork);
    if (!obj.objectID) return;
    
    NSString *sql = @"INSERT INTO {{tableName}} ({{selectColumnList}}) VALUES ({{insertColumnList}})";
    
    NSMutableArray *args = [NSMutableArray arrayWithCapacity:[self.columnNames count]];
{%trim%}
    {%for field in class.fields %}
    {%indent%}

        {
        {%indent%}
            {%if 0 == field.relationship %}{%comment%} ONE_TO_ONE {%/comment%}
                {%if 'NSString' == field.className %}
                    NSString *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}];
                {%elif 'NSNumber' == field.className %}
                    NSNumber *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}];
                {%elif 'NSDate' == field.className %}
                    NSDate *date = [obj valueForKey:@"{{field.name}}"];
                    NSNumber *{{field.name}} = @([date timeIntervalSince1970]);
                    [args addObject:{{field.name}}];
                {%elif 'NSData' == field.className %}
                    NSData *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}];
                {%else%}
                    DomainObject *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}.objectID];
                {%/if%}
            {%elif 1 == field.relationship %}{%comment%} ONE_TO_MANY {%/comment%}

            {%elif 2 == field.relationship %}{%comment%} MANY_TO_MANY {%/comment%}

            {%/if%}
        {%/indent%}
        }
    {%/indent%}
    {%/for%}
{%/trim%}

    BOOL success = NO;
    @try {
        success = [self.database executeUpdate:sql withArgumentsInArray:args];
    }
    @catch (NSException *ex) {
        NSLog(@"%@", ex);
    }
    @finally {
        
    }
}


- (void)update:(DomainObject *)obj {
    TDAssertDatabaseThread();
    TDAssert(obj);
    TDAssert(self.unitOfWork);
    if (!obj.objectID) return;
    
    NSString *sql = @"UPDATE {{tableName}} SET {{updateColumnList}} WHERE objectID = ?";
    
    NSMutableArray *args = [NSMutableArray arrayWithCapacity:[self.columnNames count]];
{%trim%}
    {%for field in class.fields %}
    {%indent%}

        {
        {%indent%}
            {%if 0 == field.relationship %}{%comment%} ONE_TO_ONE {%/comment%}
                {%if 'NSString' == field.className %}
                    NSString *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}];
                {%elif 'NSNumber' == field.className %}
                    NSNumber *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}];
                {%elif 'NSDate' == field.className %}
                    NSDate *date = [obj valueForKey:@"{{field.name}}"];
                    NSNumber *{{field.name}} = @([date timeIntervalSince1970]);
                    [args addObject:{{field.name}}];
                {%elif 'NSData' == field.className %}
                    NSData *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}];
                {%else%}
                    DomainObject *{{field.name}} = [obj valueForKey:@"{{field.name}}"];
                    [args addObject:{{field.name}}.objectID];
                {%/if%}
            {%elif 1 == field.relationship %}{%comment%} ONE_TO_MANY {%/comment%}

            {%elif 2 == field.relationship %}{%comment%} MANY_TO_MANY {%/comment%}

            {%/if%}
        {%/indent%}
        }
    {%/indent%}
    {%/for%}
{%/trim%}

    BOOL success = NO;
    @try {
        success = [self.database executeUpdate:sql withArgumentsInArray:args];
    }
    @catch (NSException *ex) {
        NSLog(@"%@", ex);
    }
    @finally {
        
    }
}

@end